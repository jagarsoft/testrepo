En la sesion 2 trabajaremos sobre los ficheros a ignorar/excluir

Mostramos el estado actual

$ git status

# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	README.md
#	README.md~
#	sesion1.txt
#	sesion1.txt~
#	sesion2.txt
nothing added to commit but untracked files present (use "git add" to track)

Coincide con

git ls-files --others
README.md
README.md~
sesion1.txt
sesion1.txt~
sesion2.txt

Creamos un ad-hoc

$ cat > .gitignore
*~  

Ya no se muestran los backup de gedit

$ git status
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	.gitignore
#	README.md
#	sesion1.txt
#	sesion2.txt
nothing added to commit but untracked files present (use "git add" to track)

Pero la fontaneria aun los muestra

$ git ls-files --others
.gitignore
README.md
README.md~
sesion1.txt
sesion1.txt~
sesion2.txt

Probamos la otra alternativa

rm ./.gitignore 
gedit .git/info/exclude

Elimino el # que precede a *~

El resultado de git status y git ls-files --others
es el mismo pero dejamos esta siguiendo el consejo del manual

$ man gitignore
[...]
       Which file to place a pattern in depends on how the pattern is meant to
       be used. Patterns which should be version-controlled and distributed to
       other repositories via clone (i.e., files that all developers will want
       to ignore) should go into a .gitignore file. Patterns which are
       specific to a particular repository but which do not need to be shared
       with other related repositories (e.g., auxiliary files that live inside
       the repository but are specific to one user’s workflow) should go into
       the $GIT_DIR/info/exclude file. Patterns which a user wants git to
       ignore in all situations (e.g., backup or temporary files generated by
       the user’s editor of choice) generally go into a file specified by
       core.excludesfile in the user’s ~/.gitconfig.
[...]
